---
title: "Hypothesis testing challenge"
editor_options: 
  chunk_output_type: console

---


# Introduction

The purpose of this challenge is to enhance your understanding of various hypothesis testing methods. You will be working with a dataset that includes 100 features (e.g, gene expression) across 100 samples, divided into 'Treatment' and 'Control' groups.

You can read the data using:

```{r,eval=FALSE}
expression_data <- read.csv("https://raw.githubusercontent.com/PayamEmami/biostats1_challenge/main/expression_data.csv",row.names = 1)
metadata <- read.csv("https://raw.githubusercontent.com/PayamEmami/biostats1_challenge/main/metadata.csv",row.names = 1)
```

## Task1:

Your tasks is to perform hypothesis testing using the methods we learned on Day 2 of the course (for example Bootstrap, Permutation, Parametric or Non-Parametric) and find differentially expressed genes. 

You can check your results using [about](#ch). 


## Task2:

Fit a GLM for each feature and choose an appropriate covariate and also link function based on the distribution of your data (Day 3). Assess the significance of the group effect for each feature using the model coefficients and their p-values. 

You can check your results using [about](#ch). 

# Check your results {#ch}

Enter gene names (one per line) to check the overlap with the ground truth.

```{ojs, echo=FALSE}
//| echo: false

diagram = require("@upsetjs/bundle") 

d3 = require("d3@7")
referenceGenes =  new Set(['gene_1', 'gene_2', 'gene_3', 'gene_4', 'gene_5', 'gene_6', 'gene_7', 'gene_8', 'gene_9', 'gene_10', 'gene_11', 'gene_12', 'gene_13', 'gene_14', 'gene_15', 'gene_16', 'gene_17', 'gene_18', 'gene_19', 'gene_20'])

viewof inp = Inputs.textarea({label: "", placeholder: "Enter your genes, each line one gene"})


userGenes = new Set(inp.toLocaleString("en").split('\n').map(g => g.trim()).filter(g => g.length > 0))

userGenesArray = Array.from(userGenes);
referenceGenesArray = Array.from(referenceGenes);
intersection = new Set(userGenesArray.filter(gene => referenceGenes.has(gene)));
onlyUser = new Set(userGenesArray.filter(gene => !referenceGenes.has(gene)));
onlyReference = new Set(referenceGenesArray.filter(gene => !userGenes.has(gene)));


md`Only in your data: ${Array.from(onlyUser).join(", ")}`
md`Only in reference data: ${Array.from(onlyReference).join(", ")}`
md`Overlap: ${Array.from(intersection).join(", ")}`
elems3 = {
 let elems3 = [];

onlyUser.forEach(gene => {
    elems3.push({ name: gene, sets: ['Your results'] });
});

// Genes only in referenceGenes (S2)
onlyReference.forEach(gene => {
    elems3.push({ name: gene, sets: ['Reference'] });
});

// Genes in both sets (S1 and S2)
intersection.forEach(gene => {
    elems3.push({ name: gene, sets: ['Your results', 'Reference'] });
});
return elems3;
}

// Genes only in userGenes (S1)

chart= {

let sets=diagram.extractSets(elems3)
   let node = d3.create("div").node();
  diagram.renderVennDiagram(node, { sets, width: 500, height: 300 });
  return node;
}
//textarea(id="referenceGenes" placeholder="Enter reference genes, separated by commas", value="Gene1, Gene2, Gene3, Gene4, Gene5")
//button(onclick="updateVennDiagram()") Compare


```





